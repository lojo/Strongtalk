Delta define: #Float as: (
(Class subclassOf: 'ApproximateReal' instanceVariables: '') protocols: 'FloatCharacterization'; abstract) !

(Delta mirrorFor: #Float) revision: '$Revision: 1.9 $'!

(Delta mirrorFor: #Float) group: 'base'!

(Delta mirrorFor: #Float)
comment: 
'Float implements floating-point arithmetic (IEEE-754, double precision).

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.
'!

! (Delta mirrorFor: #Float) classSide methodsFor: 'constants' !


maxVal ^<Float>
	^self fmax!

minVal ^<Float>
	^self fmin!

minValLogBase2 ^ <Int>
	^-1074!

nan
	^(0.0/0.0)! !

! (Delta mirrorFor: #Float) classSide methodsFor: 'constants float characterization' !


denormalized ^ <Boolean>
^true!

e ^<Float>
	^ 2.718281828459045!

emax ^ <Integer>
	^1023!

emin ^ <Integer>
	^-1022!

epsilon ^ <Float>
	^1.0 timesTwoPower: 1 - self precision
	"^2.2204460492503131e-16"!

fmax ^ <Float>
	^{{self primitiveFloatMaxValue}}
	"^1.7976931348623157e308     TODO: replace"!

fmin ^ <Float>
	^self denormalized
			ifTrue: [self fminDenormalized]
			ifFalse: [self fminNormalized]
		"TODO: replace with constant"!

fminDenormalized ^ <Float>
	^1.0 timesTwoPower: self minValLogBase2
	"^4.9406564584124654e-324 TODO: replace"!

fminNormalized ^ <Float>
	^1.0 timesTwoPower: self emin
	"^2.2250738585072014e-308  TODO: replace"!

pi ^ <Float>
	^3.141592653589793!

precision ^ <Integer>
	^53!

radix ^ <Integer>
	^2! !

! (Delta mirrorFor: #Float) classSide methodsFor: 'file out' !


fileOutSignature ^<Integer>
    ^72! !

! (Delta mirrorFor: #Float) classSide methodsFor: 'instance creation' !


nan: tagp <String> ^ <Float>
	"generate a quite NaN, whose trailing fraction
	field contains the result of converting tagp to an
	unsigned integer.
	If tagp is empty, the function returns a NaN
	whose trailing fraction field is zero."
	^self unimplemented! !

! (Delta mirrorFor: #Float) classSide methodsFor: 'math constants' !


Ln10 ^ <Float>
	"log e10"
	^2.30258509299404568401799145468436421!

Ln2 ^ <Float>
	"log e2"
	^0.693147180559945309417232121458176568!

Log10e ^ <Float>
	"log 10e"
	^0.434294481903251827651128918916605082!

Log2e ^ <Float>
	"log 2e"
	^1.44269504088896340735992468100189214!

OneDivPi ^ <Float>
	"1/pi"
	^0.318309886183790671537767526745028724!

OneDivSqrt2 ^ <Float>
	"1/sqrt(2)"
	^0.707106781186547524400844362104849039!

PiDiv2 ^ <Float>
	"pi/2"
	^1.57079632679489661923132169163975144!

PiDiv4 ^ <Float>
	"pi/4"
	^0.785398163397448309615660845819875721!

RadiansPerDegree ^ <Float>
	self deltaHack.  "cache this and other constants,
									class initializer in SystemInitializer?"
	^ self pi / 180.0!

Sqrt2 ^ <Float>
	"sqrt(2)"
	^1.41421356237309504880168872420969808!

TwoDivPi ^ <Float>
	"2/pi"
	^0.636619772367581343075535053490057448!

TwoDivSqrtPi ^ <Float>
	"2/sqrt(pi)"
	^1.12837916709551257389615890312154517! !

! (Delta mirrorFor: #Float) methodsFor: 'comparison' !


< a <Number> ^<Boolean>

	^{{self primitiveFloatLessThan: a
		ifFail: [ :err <Symbol> |
				a lessFromFloat: self	]}}!

<= a <Number> ^<Boolean>

	^{{self primitiveFloatLessThanOrEqual: a
		ifFail: [ :err <Symbol> |	super <= a	]}}!

= a <Object> ^<Boolean>
	"Comparing real numbers for equality when they have approximate representations
	 is a really bad idea if they aren't representing small integers like 1.0, and isn't portable
	 (Consider whether 2.0/3.0 in single precision is
	 equal to 2.0/3.0 in double precision, for example).  If you want to do this, you should
	 consider using Number>>isWithin:of:, which allows you to
	 indicate precisely how close two numbers need to be to be considered equal."

	^{{self primitiveFloatEqual: a
		ifFail: [ :err <Symbol> |
						self nonPrimitiveEqual: a ]}}!

> a <Number> ^<Boolean>

	^{{self primitiveFloatGreaterThan: a
		ifFail: [ :err <Symbol> |	super > a	]}}!

>= a <Number> ^<Boolean>

	^{{self primitiveFloatGreaterThanOrEqual: a
		ifFail: [ :err <Symbol> |	super >= a	]}}! !

! (Delta mirrorFor: #Float) methodsFor: 'constants' !


unit ^<Float>

	^1.0!

zero ^<Float>

	^0.0! !

! (Delta mirrorFor: #Float) methodsFor: 'converting' !


asFloat ^<Float>
	"Answer a floating-point number approximating the receiver."
	^self!

asInteger ^<Int>
	"Answer an integer approximating the receiver."
	"Note: special float values such as +-Infinity, NaN are undefined!!"
	^self rounded
!

degreesToRadians ^ <Float>
	"Answer the receiver converted from degrees to radians."
	^self * self class RadiansPerDegree!

radiansToDegrees ^ <Float>
	"Answer the receiver converted from radians to degrees."
	^self / self class RadiansPerDegree! !

! (Delta mirrorFor: #Float) methodsFor: 'file out' !


fileOutHeaderOn: d <Dumper>
	super fileOutHeaderOn: d.
	self fileOutStoreString do: [ :byte <Int> |
		d putByte: byte
	]!

fileOutSignature ^<Integer>
    ^104!

fileOutStoreString ^<SeqCltn[Int]>
	^{{self primitiveFloatStoreString}}! !

! (Delta mirrorFor: #Float) methodsFor: 'iteration' !


to: stop <Float> by: step <Float> do: f <[Float]> ^<Object>

	| v <Float> |
	v := self.
	step < 0.0
		ifFalse: [ [ v <= stop ]
					whileTrue: [	f value: v.
								v := v + step  ]]
		ifTrue: [ [ v >= stop ]
					whileTrue: [ f value: v.
								v := v + step  ]].
	^nil!

to: stop <Float> do: f <[Float]> ^<Object>

	| v <Float> |
	v := self.
	[ v <= stop ]
		whileTrue: [	f value: v.
					v := v + 1.0  ].
	^nil! !

! (Delta mirrorFor: #Float) methodsFor: 'mathematical functions' !


arcCos ^<Float>
	"Answer the inverse cosine of the receiver in radians."
	^{{self primitiveFloatArcCosineIfFail: [ :err <Symbol> | self error: err ]}}!

arcSin ^<Float>
	"Answer the inverse sine of the receiver in radians."
	^{{self primitiveFloatArcSineIfFail: [ :err <Symbol> | self error: err ]}}!

arcTan ^<Float>
	"Answer the inverse tangent of the receiver in radians."
	^{{self primitiveFloatArcTangent}}!

cos ^<Float>
	"Answer the cosine of the receiver in radians."
	^{{self primitiveFloatCosine}}!

exp ^<Float>
	"Answer the natural exponential of the receiver."
	^{{self primitiveFloatExp}}!

floorLog: operand <Number> ^<Int>
	"Answer the largest integer less than or equal to
	the logarithm to the base operand of the receiver."
	
	"Float>>log: 1.0 can return +-Infinitiy, NaN, which cannot
	be represented by an <Int> type. Throw an exeception."
	operand <= 1.0 ifTrue: [self error: 'radix must be > 1'].
	^ (self log: operand) floor!

j0 ^<Float>
	"Answer the value of the zeroth Bessel function"
	^{{self primitiveFloatBesselJ0}}!

j1 ^<Float>
	"Answer the value of the first Bessel function"
	^{{self primitiveFloatBesselJ1}}!

jn: n <SmallInteger> ^<Float>
	"Answer the value of the nth Bessel function"
	^{{self primitiveFloatBesselJn: n ifFail: [ :err <Symbol> | self error: err ]}}!

ln ^<Float>
	"Answer the natural logarithm of the receiver."
	^{{self primitiveFloatLnIfFail: [ :err <Symbol> | self error: err ]}}!

sin ^<Float>
	"Answer the sine of the receiver."
	^{{self primitiveFloatSine}}!

sqrt ^<Float>
	"Answer the positive square root of the receiver."
	^{{self primitiveFloatSqrtIfFail: [ :err <Symbol> | self error: err ]}}!

tan ^<Float>
	"Answer the tangent of the receiver."
	^{{self primitiveFloatTangent}}!

timesTwoPower: a <Int> ^ <Float>
	^{{self primitiveFloatTimesTwoPower: a ifFail: [ :err <Symbol> | self error: err ]}}!

y0 ^<Float>
	"Answer the value of the zeroth Bessel function of the second kind"
	^{{self primitiveFloatBesselY0}}!

y1 ^<Float>
	"Answer the value of the first Bessel function of the second kind"
	^{{self primitiveFloatBesselY1}}!

yn: n <SmallInteger> ^<Float>
	"Answer the value of the nth Bessel function of the second kind"
	^{{self primitiveFloatBesselYn: n ifFail: [ :err <Symbol> | self error: err ]}}! !

! (Delta mirrorFor: #Float) methodsFor: 'obsolete' !


isNan ^ <Boolean>
	"Deprecated. Use isNaN instead"
	^self isNaN
!

isNil ^<Boolean>
	"Deprecated. Use isNaN instead"
	^self isNaN! !

! (Delta mirrorFor: #Float) methodsFor: 'operations' !


* a <Number> ^<X>
			{where X <Number> is returnType of #multiplyFromFloat: message of arg 1}
	^guaranteed <X> {{self primitiveFloatMultiply: a
		ifFail: [ :err <Symbol> |
				self nonPrimitiveMultiply: a error: err ]}}!

+ a <Number> ^<X>
			{where X <Number> is returnType of #addFromFloat: message of arg 1}
	^guaranteed <X> {{self primitiveFloatAdd: a
		ifFail: [ :err <Symbol> |
				self nonPrimitiveAdd: a error: err ]}}!

- a <Number> ^<X>
			{where X <Number> is returnType of #subtractFromFloat: message of arg 1}
	^guaranteed <X> {{self primitiveFloatSubtract: a
		ifFail: [ :err <Symbol> |
				self nonPrimitiveSubtract: a error: err ]}}!

/ a <Number> ^<X>
			{where X <Number> is returnType of #divideFromFloat: message of arg 1}
	^guaranteed <X> {{self primitiveFloatDivide: a
		ifFail: [ :err <Symbol> |
				self nonPrimitiveDivide: a error: err	]}}!

copySign: sign <Float> ^ <Float>
	"Answer the value equal in magnitude to
	me but with specified sign (correctly rounded)."
	
	"Note: IEEE-754 recommends copySign to reveal the sign
	without ever signaling an exception,"
	^{{self primitiveFloatCopySign: sign}}!

nextAfter: direction <Float> ^ <Float>
	"Answer the next floating-point number after
	me specified by direction (correctly-rounded)."
	^{{self primitiveFloatNextAfter: direction}}! !

! (Delta mirrorFor: #Float) methodsFor: 'printing' !


printOn: strm <CharOutputStream>
	"NB: Temporary solution. The current algorithm
	uses a decimal float notation for numbers in the range
		0.001 <= x < 10000000
	otherwise scientific float notation in the form of
		(-)xxxx.xxxxE(-)xxx
		 
	An better and ***exact***representation how to print a floating-point
	number will be postponed by now (see references below).
	
	Reference:
	- Printing Floating-Point Numbers Quickly and Accurately (by Robert G. Burger, R. Kent Dybvig)
	- How to print floating-point numbers accurately (by Guy L. Steele, Jr., Jon L. White)
	"
	
	"%todo: implement this right"
	{{self primitiveFloatPrintString}}
		do: [ :c <Int> |
				strm nextPut: (Character value: c) ]! !

! (Delta mirrorFor: #Float) methodsFor: 'private' !


nonPrimitiveAdd: a <Number> error: err <Symbol> ^<Number>

	^(err equalsSymbol: #FirstArgumentHasWrongType)
			ifTrue: [ a addFromFloat: self]
			ifFalse: [	self error: 'double addition error: ', err.	 ]!

nonPrimitiveDivide: a <Number> error: err <Symbol> ^<Number>

	^err == #FirstArgumentHasWrongType
			ifTrue: [ a divideFromFloat: self]
			ifFalse: [	self error: 'Float division error: ', err.	 ]!

nonPrimitiveEqual: a <Object> ^<Boolean>
	"This is invoked on primitive equality failure"

"%todo: use this typesafe version when coerce: is fast
	^(Number coerce: a else: [ ^false ]) equalFromFloat: self
"
	^a Number
		ifTrue: [ (guaranteed <Number> a) equalFromFloat: self ]
		ifFalse: [ false ]!

nonPrimitiveMultiply: a <Number> error: err <Symbol> ^<Number>

	^err == #FirstArgumentHasWrongType
			ifTrue: [ a multiplyFromFloat: self]
			ifFalse: [	self error: 'double multiplication error: ', err.	 ]!

nonPrimitiveSubtract: a <Number> error: err <Symbol> ^<Number>

	^err == #FirstArgumentHasWrongType
			ifTrue: [ a subtractFromFloat: self ]
			ifFalse: [	self error: 'double subtraction error: ', err.	 ]! !

! (Delta mirrorFor: #Float) methodsFor: 'restricted-double dispatching' !


addFromFloat: o <Float> ^<Float>
	self error: 'can''t happen because of double dispatching, but need for typing'.!

divideFromFloat: o <Float> ^<Float>
	self error: 'can''t happen because of double dispatching, but need for typing'.!

equalFromFloat: o <Float>  ^<Boolean>
	self error: 'can''t happen because of double dispatching'!

lessFromFloat: o <Float>  ^<Boolean>
	self error: 'can''t happen because of double dispatching'!

moduloFromFloat: o <Float> ^<Number>
	^o - ((o // self) * self)!

multiplyFromFloat: o <Float> ^<Float>
	self error: 'can''t happen because of double dispatching, but need for typing'.!

subtractFromFloat: o <Float> ^<Float>
	self error: 'can''t happen because of double dispatching, but need for typing'.! !

! (Delta mirrorFor: #Float) methodsFor: 'testing' !


isFinite ^ <Boolean>
	"Answer true if I am not infinite, i.e.
		if  -infinity < me < +infinity.
	answer false if I am infinite or a NaN."
	^{{self primitiveFloatIsFinite}}!

isInfinity ^ <Boolean>
	"answer true if my magnitude is +infinity or -infinity"
	^{{self primitiveFloatIsInfinity}}!

isNaN ^ <Boolean>
	"answer true if I am Not-a-Number (NaN)"
	^{{self primitiveFloatIsNan}}!

isNormal ^ <Boolean>
	"answer true if I am a non-zero normalized number"
	^{{self primitiveFloatIsNormal}}! !

! (Delta mirrorFor: #Float) methodsFor: 'truncation and rounding' !


\\ a <Number> ^<X>
			{where X <Number> is returnType of #moduloFromFloat: message of arg 1}
	"%generated code- do not modify"
	^guaranteed <X> (a moduloFromFloat: self)!

exponent ^ <Int>
	"Answer the exponent of the receiver with radix 2"
	^{{self primitiveFloatExponent}}
!

fractionPart ^<Float>
	"Answer the fractional part of the receiver."
	^{{self primitiveFloatFractionPart}}!

integerPart ^<Float>
	"Answer the integer part of the receiver."
	^self - self fractionPart!

significand ^ <Float>
	"Answer the normalized fraction (significand) of the receiver"
	^{{self primitiveFloatSignificand}}!

truncated ^<Int>
	"Answer an integer equal to the receiver truncated towards zero."
	^{{
		self primitiveFloatTruncatedAsSmallIntegerIfFail: [ :err <Symbol> |
			self isFinite
				ifTrue: [LargeInteger forFloat: self]
				ifFalse: [self error: 'Cannot truncate a NaN or an Infinity']]
		}}! !

