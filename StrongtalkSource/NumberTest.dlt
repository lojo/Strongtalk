Delta define: #NumberTest as: (
(Class subclassOf: 'TestCase' instanceVariables: '')) !

(Delta mirrorFor: #NumberTest) revision: '$Revision:$'!

(Delta mirrorFor: #NumberTest) group: 'Unclassified'!

(Delta mirrorFor: #NumberTest)
comment: 
'SUnit Test for the corresponding Number class.'!

! (Delta mirrorFor: #NumberTest) methodsFor: 'tests' !


testArithmetic
	| eps <Float> |
	eps := 0.00000001.
	
	"+"
	self
		  assert: [3+3 = 6]; assert: [1+(2/3) = (5/3)]; assert: [1 + 2.0 isWithin: eps of: 3.0]
		; assert: [3.0 + 3.0 isWithin: eps of:  6.0]; assert: [1.0 + (2/3) isWithin: eps of: 5/3]; assert: [1.0 + 2 isWithin: eps of: 3.0]
		; assert: [(1/3 + 1/6) = (2/9)]; assert: [2/3 + (1 asFloat/ 3 asFloat) isWithin: eps of: 1].
		
	"-"
	self
		  assert: [3-1 = 2]; assert: [1-(2/3) = (1/3) ]; assert: [1 - 2.0 isWithin: eps of: -1.0]
		; assert: [3.0 - 2.0 isWithin: eps of:  1.0]; assert: [1.0 - (2/3) isWithin: eps of: 1/3]; assert: [1.0 - 2 isWithin: eps of: -1.0]
		; assert: [(1/3 - 1/6) = (-1/9)]; assert: [4/3 - (1 asFloat/ 3 asFloat) isWithin: eps of: 1].
		
	"*"
	self
		  assert: [2*3 = 6]; assert: [2*3.0 isWithin: eps of: 6.0]; assert: [3*(1/3) = 1]
		; assert: [2.0 *3.0 isWithin: eps of: 6.0]; assert: [2.0*(1/2) isWithin: eps of: 1]; assert: [2.0 * 3 isWithin: eps of: 6]
		; assert: [2/3 * (1/3) = (2/9)]; assert: [2/3 * (1 asFloat / 3 asFloat) isWithin: eps of: 2/9]; assert: [2/3 * 2 = (4/3)].
		
	"/"
	self
		  assert: [6/3 = 2]; assert: [6/3.0 isWithin: eps of: 2]; assert: [3/(1/3) = 9]
		; assert: [6.0 / 2 isWithin: eps of: 3]; assert: [6.0 / 2.0 isWithin: eps of: 3]; assert: [6.0 / (1/3) isWithin: eps of: 18]
		; assert: [2/3/(1/2) = (4/3)]; assert: [2/3/0.5 isWithin: eps of: 4/3]; assert: [2/3/2 = (1/3)].
		
	"//"
	self
		  assert: [7 // 2 = 3]; assert: [7 // 2.0 isWithin: eps of: 3]; assert: [7 // (1/2) = 14]; assert: [-7 // 2 = -4]
		; assert: [7.0 // 2.0 = 3]; assert: [7.0 // 2 isWithin: eps of: 3]; assert: [7.0 // (1/2) = 14]; assert: [-7.0 // 2 = -4]
		; assert: [7/3 // (2/3) = 3]; assert: [-7/3 // (2/3) = -4].
		
	"\\"
	self
		  assert: [7 \\ 2 = 1]; assert: [7 \\ 2.0 isWithin: eps of: 1]; assert: [(7+ 1/3) \\ (1/2) = (1/6)]; assert: [-7 \\ 2 = 1]
		; assert: [7.0 \\ 2.0 isWithin: eps of: 1.0]
		; assert: [7.0 \\ 2 isWithin: eps of: 1]
		; assert: [(7.0 + (1/3) asFloat) \\ (1/2) isWithin: eps of: 1/3]
		; assert: [-7.0 \\ 2 isWithin: eps of: 1]
		; assert: [7/3 \\ (2/3) = (1/3) ]; assert: [  -7/3 \\ (2/3) = (1/3)].

	!

testEquals
	"=, ~="	
	self
		  assert: [123 == 123]; deny: (-2 == -3)
		; assert: [123 = 123]; assert: [123 ~= -123]
		; assert: [123 = (246/2)]; assert: [123 ~= (246/3)]
		; assert: [123 = 123.0]; assert: [123 ~= -123.1]
		
		; assert: [123.0 = 123.0]; assert: [123.0 ~= 123.4]
		; assert: [123.0 = 123]; assert: [123.0 ~= 124]
		; assert: [0.5 = (1/2)]; assert: [-0.5 = (1/-2)]; assert: [0.5 ~= (1/3)]

		; assert: [(3/4) = (6/8)]; assert: [(3/4) ~= (1/4)]
		; assert: [(1/3) = (1.0/3.0)]; assert: [(1/3) ~= 0.33333]
		; assert: [(2/3) * 3 = 2]
		; assert: [(-10/-5) = 2]; assert: [(-10/5) = -2]; assert: [(10/-5) = -2]
!

testRelationals
	"<"
	self
		  assert: [123 < 125]; deny: (123 < 122)
		; assert: [123 < 124.0]; deny: (123 < 122.0)
		; assert: [2  < (11/5)]; deny: (2 < (9/5))

		; assert: [123.0 < 124.0]
		; assert: [123.0 < 124]
		; assert: [2.0 < (11/5)]
		  
		; assert: [(11/5) < (12/5)]; deny: ((11/5) < (9/5)); assert: [(9/5) < (10/5)]
		; deny: ((11/5) < (11/5))
		; assert: [(-4/5) < 0]; assert: [(4/-5) < (-3/5)]; assert: [(2/3) < (-4/-3)]
		; assert: [2/3 < 1]; deny: (4/3 < 1)
		; assert: [2/3 < 1.0]; deny: (4/3 < 1.0).
		
	">"
	self
		  assert: [123 > 122]; deny: (121 > 122)
		; assert: [123 > 122.0]; deny: (123 > 124.0)
		; assert: [2 > (9/5)]; deny: (2 > (11/5))
	
		; assert: [124.0 > 123.0]
		; assert: [124.0 > 123]
		; assert: [2.0 > (9/5)]
	
		; assert: [(12/5) > (11/5)]; deny: ((9/5) > (11/5)); assert: [(10/5) > (9/5)]
		; deny: ((11/5) > (11/5))
		; assert: [(-4/5) > -1 ]; assert: [(3/-5) > (-4/5)]; assert: [(4/3) > (-2/-3)]
		; assert: [2/3 > 0]; deny: (4/3 > 2)
		; assert: [2/3 > 0.0]; deny: (4/3 > 2.0).

	"<="
	self
		  assert: [1 <= 2]; assert: [2 <= 2]; deny: (2 <= 1)
		; assert: [1.0 <= 2.0]; assert: [2.0 <= 2.0]; deny: (2.0 <= 1.0)
		; assert: [0.666 <= (2/3)]; deny: (0.666 <= (1/3)).
		
	">="
	self
		  assert: [1 >= 0]; deny: (1 >= 2); assert: [1 >= 1]
		; assert: [1.0 >= 0.0]; deny: (1.0 >= 2.0); assert: [1.0 >= 1.0]	
		; assert: [0.66 >= (1/3)]; deny: (0.66 >= (2/3))
		; assert: [(1/3) >= (1/3)]; assert: [(2/3) >= (1/3)].
		
	">"
	self
		  assert: [1 > 0 ]; deny: (1 > 2); deny: (1 > 1)
		; assert: [1.0 > 0.0]; deny: (1.0 > 2.0); deny: (1.0 > 1.0)
		; assert: [0.66 > (1/3)]; deny: (0.66 > (2/3))
		; deny: ((1/3) > (1/3)); assert: [(2/3) > (1/3)].
		
	"min:"
	self
		  assert: [(4 min: 5) = 4]
		; assert: [(5 min: 4) = 4]
		; assert: [(5 min: 4.0) = 4.0]
		; assert: [(1 min: 2/3)  = (2/3)].
		
	"max:"
	self
		  assert: [(5 max: 4) = 5]
		; assert: [(4 max: 5) = 5]
		; assert: [(5 max: 4.0) = 5]
		; assert: [(1 max: 4/3)  = (4/3)].
	
	"between:and:"
	self
		  assert: [2 between: 1 and: 3]
		; assert: [3 between: 3 and: 4 ]
		; deny: (2 between: 3 and: 4).
	! !

